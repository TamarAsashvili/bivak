'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanPropsFunc = undefined;

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _pick = require('lodash/pick');

var _pick2 = _interopRequireDefault(_pick);

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _MapHelpers = require('./MapHelpers');

var _clean = require('./clean');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Pass in all props every time
/* eslint-disable no-use-before-define */

var cleanPropsFunc = exports.cleanPropsFunc = function cleanPropsFunc(props) {
  var p = (0, _cloneDeep2.default)(props);
  if (document.querySelector('a.leaflet-draw-edit-remove')) {
    var el = document.querySelector('a.leaflet-draw-edit-remove');
    el.onclick = function () {
      p.remove = !props.remove;
      cleanProps(p, props.onShapeChange, _noop2.default);
    };
    el.classname = 'leaflet-draw-edit-remove';
  }
  var center = (0, _MapHelpers.makeCenterLeaflet)((0, _MapHelpers.makePoint)(props.center));
  var features = p.features || [];
  var points = p.points || [];
  var feats = (0, _map2.default)(features, function (x) {
    return (0, _clean.cleanPoly)(x, props.maxAreaEach, props.featureValidator);
  });
  var pnts = (0, _map2.default)(points, function (x) {
    return (0, _clean.cleanPoint)(x);
  });
  var ess = (0, _merge2.default)(p, {
    center: center,
    totalArea: (0, _reduce2.default)(feats, _MapHelpers.areaAccumulator, 0),
    edit: props.edit
  });
  ess.features = feats;
  ess.points = pnts;
  ess.bindPoint = p.bindPoint && p.bindPoint.leafletMap ? p.bindPoint : {};
  var a = (0, _pick2.default)(ess, ['matches', 'center', 'cluster', 'edit', 'features', 'force', 'heatmap', 'makeCircleOn', 'points', 'remove', 'tileLayerProps', 'totalArea', 'zoom', 'newCircleCenter', 'newCircleRadius']);
  return a;
  // this.maybeZoomToShapes();
};

var cleanProps = function cleanProps(props, update, cb) {
  update((0, _cloneDeep2.default)(cleanPropsFunc(props)), cb);
};

exports.default = cleanProps;