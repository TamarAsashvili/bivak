'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

var _map = require('lodash/map');

var _map2 = _interopRequireDefault(_map);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

require('react-leaflet-fullscreen/dist/styles.css');

require('react-leaflet-markercluster/dist/styles.min.css');

var _reactLeafletFullscreen = require('react-leaflet-fullscreen');

var _reactLeafletFullscreen2 = _interopRequireDefault(_reactLeafletFullscreen);

var _reactLeaflet = require('react-leaflet');

require('./leaflet.css');

require('./leaflet.draw.css');

var _tooltipHelpers = require('./tooltipHelpers');

var _geosuggest = require('./geosuggest');

var _geosuggest2 = _interopRequireDefault(_geosuggest);

var _EditTools = require('./EditTools');

var _EditTools2 = _interopRequireDefault(_EditTools);

var _CircleApprox = require('./CircleApprox');

var _CircleApprox2 = _interopRequireDefault(_CircleApprox);

var _clickShape = require('./clickShape');

var _onTileSet = require('./onTileSet');

var _onTileSet2 = _interopRequireDefault(_onTileSet);

var _MapHelpers = require('./MapHelpers');

var _defaultIcon = require('./defaultIcon');

var _defaultIcon2 = _interopRequireDefault(_defaultIcon);

var _cleanProps = require('./cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _makeCircle = require('./makeCircle');

var _makeCircle2 = _interopRequireDefault(_makeCircle);

var _points = require('./points');

var _points2 = _interopRequireDefault(_points);

var _heatmap = require('./heatmap');

var _heatmap2 = _interopRequireDefault(_heatmap);

require('./main.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultCenter = {
  type: 'Point',
  coordinates: [-85.751528, 38.257222]
};

var style = {
  color: 'green',
  fill: true,
  fillColor: 'green',
  fillOpacity: 0.45
};
var deleteStyle = {
  color: 'red',
  fill: true,
  fillColor: 'red',
  fillOpacity: 0.45
};
var errorStyle = {
  color: 'red',
  fillColor: 'red',
  dashArray: '1,5',
  fillOpacity: '0.1'
};
var hoveredStyle = {
  color: 'blue',
  fill: true,
  fillOpacity: 0.45
};

var RemovePolyBanner = _react2.default.createElement(
  'div',
  { className: 'alert alert-info', role: 'alert' },
  'Click a shape to remove.'
);

var MapComponent = function MapComponent(props) {
  var tileLayerProps = props.tileLayerProps,
      height = props.height,
      _props$tooltipOptions = props.tooltipOptions,
      tooltipOptions = _props$tooltipOptions === undefined ? {} : _props$tooltipOptions;

  (0, _merge2.default)(style, props.style);
  (0, _merge2.default)(hoveredStyle, props.hoveredStyle);

  // Create Leaflet GeoJSON components from features in container state
  var features = (0, _map2.default)((0, _MapHelpers.polygonArrayToProp)(props.features), function (result) {
    var p = result.properties;
    var thisStyle = (0, _cloneDeep2.default)(style);
    var thisTooltipOptions = (0, _cloneDeep2.default)(tooltipOptions);
    if (p.errors && p.errors.length && p.errors.length > 0) {
      (0, _merge2.default)(thisStyle, errorStyle);
      (0, _merge2.default)(thisTooltipOptions, {
        tipMessage: p.errors.join(', ')
      });
    }
    if (props.edit && props.remove) {
      (0, _merge2.default)(thisStyle, deleteStyle);
    }
    return _react2.default.createElement(
      _reactLeaflet.GeoJSON,
      {
        style: thisStyle,
        data: result,
        key: _uuid2.default.v4(),
        uuid: p.key || _uuid2.default.v4(),
        editable: p.editable,
        onClick: _clickShape.clickFeature.bind(undefined, props),
        onMouseOut: function onMouseOut(e) {
          e.layer.setStyle(thisStyle);
        },
        onMouseOver: function onMouseOver(e) {
          e.layer.setStyle(hoveredStyle);
        }
      },
      _react2.default.createElement(
        _reactLeaflet.Tooltip,
        { className: (0, _tooltipHelpers.tooltipClass)(thisTooltipOptions) },
        _react2.default.createElement(
          'span',
          null,
          props.edit && props.remove ? 'CLICK TO DELETE' : '' + (0, _tooltipHelpers.tooltipMessage)(p, thisTooltipOptions)
        )
      )
    );
  });
  var removePolyBanner = props.edit && props.remove ? RemovePolyBanner : '';
  var makeCircleApprox = props.makeCircleOn ? _react2.default.createElement(_CircleApprox2.default, Object.assign({
    makeCircle: _makeCircle2.default.bind(undefined, props)
  }, props)) : '';
  var zoomButton = props.features.length > 0 || props.points.length > 0 ? _react2.default.createElement(
    'button',
    { type: 'button', className: 'zoom-button btn btn-secondary btn-sm',
      onClick: _MapHelpers.zoomToShapes.bind(undefined, props, props.bindPoint)
    },
    'Zoom to shapes'
  ) : '';
  var removeAllButton = (props.features.length > 0 || props.points.length > 0) && props.edit ? _react2.default.createElement(
    'button',
    {
      type: 'button',
      className: 'btn btn-danger btn-sm',
      onClick: _MapHelpers.removeAllFeatures.bind(undefined, props)
    },
    'Remove all shapes'
  ) : '';
  var satButton = _react2.default.createElement(
    'button',
    { type: 'button', className: 'btn btn-secondary btn-sm maps-tiles',
      id: 'sat', onClick: function onClick() {
        return props.tileSwitcher('sat');
      }
    },
    'Satellite View'
  );
  var streetButton = _react2.default.createElement(
    'button',
    { type: 'button', className: 'btn btn-secondary btn-sm maps-tiles',
      id: 'street', onClick: function onClick() {
        return props.tileSwitcher('street');
      }
    },
    'Street View'
  );
  var openFeatureMessage = props.openFeature ? _react2.default.createElement(
    'div',
    null,
    'Click the polygon again to finish editing'
  ) : '';
  var rH = function rH() {
    (0, _MapHelpers.removeHandler)(props);
  };
  if (props.bindPoint && (0, _isEqual2.default)(props.center, defaultCenter)) {
    (0, _MapHelpers.zoomToShapes)(props, props.bindPoint);
  }
  (0, _cleanProps2.default)(props, props.onShapeChange, _noop2.default);
  var center = props.center && props.center.lat ? (0, _MapHelpers.makeCenterLeaflet)(props.center) : (0, _MapHelpers.makeCenterLeaflet)(defaultCenter);
  return _react2.default.createElement(
    'div',
    null,
    openFeatureMessage,
    _react2.default.createElement(
      _reactLeaflet.Map,
      {
        ref: function ref(m) {
          props.setBindPoint(m, props);
        },
        style: { height: height },
        minZoom: 3,
        maxZoom: 18,
        center: center,
        zoom: props.zoom || 9
      },
      removePolyBanner,
      _react2.default.createElement(_geosuggest2.default, props),
      _react2.default.createElement(_reactLeaflet.TileLayer, {
        url: props.tileLayer.url,
        attribution: props.tileLayer.attribution,
        subdomains: props.tileLayer.subdomains
      }),
      _react2.default.createElement(_reactLeafletFullscreen2.default, { position: 'topright' }),
      _react2.default.createElement(_EditTools2.default, Object.assign({}, props, { removeHandler: rH })),
      features,
      props.heatmap ? (0, _heatmap2.default)(props) : (0, _points2.default)(props),
      (0, _heatmap2.default)(props),
      _react2.default.createElement(
        'div',
        { className: 'map-btn-group btn-group' },
        zoomButton,
        removeAllButton,
        console.log(props.tileLayer),
        props.tileLayer.name === 'street' ? satButton : streetButton
      ),
      _react2.default.createElement(
        'div',
        { className: 'map-remove-poly-banner' },
        removePolyBanner
      )
    ),
    _react2.default.createElement(
      'div',
      { className: 'map-below-map' },
      props.legendComponent(props),
      props.maxArea < props.totalArea ? 'Area too large, cannot save' : '',
      makeCircleApprox
    )
  );
};

MapComponent.propTypes = {
  bindPoint: _propTypes2.default.object,
  bounds: _propTypes2.default.array,
  center: _propTypes2.default.object,
  clickPoly: _propTypes2.default.func,
  edit: _propTypes2.default.bool,
  geolocate: _propTypes2.default.bool,
  handleSubmit: _propTypes2.default.func,
  height: _propTypes2.default.number,
  hoveredStyle: _propTypes2.default.object,
  includeZipRadius: _propTypes2.default.bool,
  markerIcon: _propTypes2.default.object,
  legendComponent: _propTypes2.default.func,
  legendProps: _propTypes2.default.object,
  makeCircle: _propTypes2.default.func,
  makeCircleOn: _propTypes2.default.bool,
  maxArea: _propTypes2.default.number,
  onCreated: _propTypes2.default.func,
  onLocationSelect: _propTypes2.default.func,
  onTileSet: _propTypes2.default.func,
  openFeature: _propTypes2.default.bool,
  points: _propTypes2.default.arrayOf(_propTypes2.default.object),
  features: _propTypes2.default.arrayOf(_propTypes2.default.object),
  radiusChange: _propTypes2.default.func,
  refresh: _propTypes2.default.string,
  remove: _propTypes2.default.bool,
  removeAllFeatures: _propTypes2.default.func,
  setCenter: _propTypes2.default.arrayOf(_propTypes2.default.number),
  setCenterAndZoom: _propTypes2.default.func,
  style: _propTypes2.default.object,
  submitText: _propTypes2.default.string,
  tileLayerProps: _propTypes2.default.object,
  tooltipOptions: _propTypes2.default.object,
  totalArea: _propTypes2.default.number,
  unit: _propTypes2.default.string,
  update: _propTypes2.default.string,
  zipRadiusChange: _propTypes2.default.func,
  zoom: _propTypes2.default.number,
  zoomToShapes: _propTypes2.default.func
};

MapComponent.defaultProps = {
  bindPoint: {},
  center: defaultCenter,
  features: [],
  featureValidator: function featureValidator() {
    return [];
  },
  height: 400,
  legendComponent: _noop2.default,
  makeCircleOn: false,
  markerIcon: (0, _MapHelpers.generateIcon)(_defaultIcon2.default),
  onShapeChange: function onShapeChange(a, cb) {
    cb(null, a);
  },
  points: [],
  remove: false,
  tileLayerProps: {
    url: 'https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',
    subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
  },
  zoom: 9
};
exports.default = MapComponent;