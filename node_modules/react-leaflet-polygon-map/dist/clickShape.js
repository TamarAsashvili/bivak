'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clickPoint = exports.clickFeature = undefined;

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _filter = require('lodash/filter');

var _filter2 = _interopRequireDefault(_filter);

var _noop = require('lodash/noop');

var _noop2 = _interopRequireDefault(_noop);

var _reduce = require('lodash/reduce');

var _reduce2 = _interopRequireDefault(_reduce);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _cleanProps = require('./cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _clean = require('./clean');

var _MapHelpers = require('./MapHelpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Sometimes clicking a polygon opens/closes for editing, sometimes it
// deletes the poly
var clickFeature = exports.clickFeature = function clickFeature(props, e) {
  if (!props.edit) return;
  if (props.remove) {
    var s = (0, _cloneDeep2.default)(props);
    var key = e.layer.options.uuid;
    var features = (0, _filter2.default)(s.features, function (feat) {
      return key !== feat.properties.key;
    });
    s.features = (0, _cloneDeep2.default)(features);
    (0, _cleanProps2.default)(s, props.onShapeChange, _noop2.default);
  } else {
    var _key = e.layer.options.uuid;
    var p = (0, _cloneDeep2.default)(props);
    var _features = p.features;

    var index = (0, _MapHelpers.indexByKey)(_features, _key);
    var editable = _features[index].properties.editable || false;
    if (editable) _features[index] = (0, _clean.cleanPoly)(e.layer.toGeoJSON(), props.maxAreaEach, props.validateFunc);
    _features[index].properties.editable = !editable;
    p.openFeature = !editable;
    p.features = _features;
    p.totalArea = (0, _reduce2.default)(_features, _MapHelpers.areaAccumulator, 0);
    p.legendProps = (0, _omit2.default)(props, 'legendProps');
    (0, _cleanProps2.default)((0, _MapHelpers.incForce)(p), props.onShapeChange, _noop2.default);
  }
};

var clickPoint = exports.clickPoint = function clickPoint(props, e) {
  if (!props.edit) return;
  if (props.remove) {
    var key = e.target.options.uuid;
    var points = (0, _filter2.default)(props.points, function (point) {
      return key !== point.properties.key;
    });
    var s = (0, _cloneDeep2.default)(props);
    s.points = points;
    s.legendProps = (0, _omit2.default)(s, 'legendProps');
    s.remove = false;
    (0, _cleanProps2.default)(s, props.onShapeChange, _noop2.default);
  } else {
    var makeCircle = !!props.makeCircleOn;
    if (!makeCircle) {
      var _s = (0, _cloneDeep2.default)(props);
      var newCircleCenter = e.target.toGeoJSON();
      _s.makeCircleOn = true;
      _s.newCircleCenter = newCircleCenter;
      (0, _cleanProps2.default)(_s, props.onShapeChange, _noop2.default);
    }
  }
};